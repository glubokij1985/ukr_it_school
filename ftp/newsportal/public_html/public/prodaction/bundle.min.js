function Helper(){};

Helper.prototype.today = function(){
    var date = new Date(),
        current = new Date(date.getFullYear(), date.getMonth(), date.getDate()).valueOf();
    return current;
};

Helper.prototype.getMounth = function(mounth, lang){            
    var mounthObject = {
        ru: {
            0: 'Января',
            1: 'Февраля',
            2: 'Марта',
            3: 'Апреля',
            4: 'Мая',
            5: 'Июня',
            6: 'Июля',
            7: 'Августа',
            8: 'Сентября',
            9: 'Октября',
            10: 'Ноября',
            11: 'Декабря'
        },
        uk: {
            0: "Січня",
            1: "Лютого",
            2: "Березня",
            3: "Квітня",
            4: "Травня",
            5: "Червня",
            6: "Липня",
            7: "Серпня",
            8: "Вересня",
            9: "Жовтня",
            10: "Листопада",
            11: "Грудня"
        }
    };            
    return mounthObject[lang][mounth];
};

Helper.prototype.compareDate = function(date, lang){
    var self = this;
    var onlyDate = date.split(' ')[0],
        onlyTime = date.split(' ')[1],
        curDate = new Date(onlyDate),
        currentDate = new Date(curDate.getFullYear(), curDate.getMonth(), curDate.getDate()).valueOf(),
        now = self.today();
    if(now > currentDate){
        return curDate.getDate() + ' ' + self.getMounth(curDate.getMonth(), lang) + ' ' + curDate.getFullYear();
    } else {
        return onlyTime;
    }
};

Helper.prototype.getElemByAttr = function(attr){
    var arrElemsByAttr = [];
    var allElems = document.getElementsByTagName('*');
    for(var i = 0; i < allElems.length; i++){
        if(allElems[i].getAttribute(attr) != null){
            arrElemsByAttr.push(allElems[i]);
        }
    };
    return arrElemsByAttr;
};
function App(){
	this.init();
};

App.prototype = Object.create(Helper.prototype);
App.prototype.constructor = App;

App.prototype.init = function(){
	new Category(document.querySelector('.val-full-width-category'));
	new CategorySingle(document.getElementById('val-single-category'));
	new Currency();
	new FixedAccord(document.getElementById('val-only-else-pages'));
	new Iframe(document.querySelector('.val-iframe-streams'));
    new Modal();
    new Slider(document.querySelector('.val-slider-general-news'));
    new Weather();
};

window.addEventListener('DOMContentLoaded', function(){
	new App();
});
function Slider(elem){
	if(!elem) return;

	var self = this;

	this.arrLi = document.querySelectorAll('.val-list-slider li');
	this.liWidth = this.arrLi[0].clientWidth;
	this.liCount = this.arrLi.length;  
	this.pagin = document.querySelector('.val-display-controls');    		
	this.ul = document.querySelector('.val-list-slider');
	this.ulWidth = this.liCount * this.liWidth;
	var str = '';

	for(var i = 0; i < this.liCount; i++){
		this.arrLi[i].setAttribute('data-slide', i);
		str += this.setDataContr(this.arrLi[i].getAttribute('data-slide'));
	};

	this.pagin.insertAdjacentHTML('afterBegin', str);
	this.paginBtn = document.querySelectorAll('.val-display-controls span'); 
	this.paginBtn[0].classList.add('-active-slide');
	this.paginBtnActive = document.querySelector('.val-display-controls span.-active-slide');
	this.paginBtnActiveAttr = this.paginBtnActive.getAttribute('data-controls');
	this.createStyle('width', this.ulWidth, this.ul);
	this.pagin.addEventListener('click', this.moveSlide.bind(this));
};

Slider.prototype = Object.create(App.prototype);
Slider.prototype.constructor = Slider;

Slider.prototype.moveSlide = function(event){
	var self = this;
	var target = event && event.target || event.srcElement,
		targetDataAttr = target.getAttribute('data-controls'),
		deltaX = 0;

	if(targetDataAttr > self.paginBtnActiveAttr){
		deltaX = -targetDataAttr * self.liWidth;
	} else {
		deltaX = targetDataAttr * self.liWidth;
	};
	self.ul.style.transform = 'translateX(' + deltaX + 'px)';
	self.paginBtnActive.classList.remove('-active-slide');
	target.classList.add('-active-slide');
	self.paginBtnActive = document.querySelector('.val-display-controls span.-active-slide');
};

Slider.prototype.setDataContr = function(dataAttr){
	var paginator = '<span data-controls="' + dataAttr + '"></span>';
	this.arrLi[0].classList.add('-active-slide');
	return paginator;
};

Slider.prototype.createStyle = function(prop, val, el){
	el.style.cssText += prop + ':' + val + 'px';
};
function Weather(){
	var self = this;
	var xhr = new XMLHttpRequest();

    xhr.open('GET', 'https://query.yahooapis.com/v1/public/yql?q=select%20item%20from%20weather.forecast%20where%20woeid%3D918233%20and%20u%3D%22c%22&format=json&l=ru', true);

    xhr.onreadystatechange = function() {
        if (xhr.readyState === 4 && xhr.status === 200) {
                var xhrObject = JSON.parse(xhr.responseText);
                self.getItem(xhrObject, 'item', self.getCurrentWeather, self);               
	        }
    };

    xhr.send();

    this.getItem = function(obj, prop, callback, self){
      	for(var key in obj){
          	if(key == prop) {
              	callback(obj[key], self);
              	return;
          	} else if(typeof obj[key] == 'object'){
              	self.getItem(obj[key], prop, callback, self);
          	}
      	};
    };
};

Weather.prototype = Object.create(App.prototype);
Weather.prototype.constructor = Weather;

Weather.prototype.getCurrentWeather = function(val, self){
	var weatherBlock = document.querySelector('.outer-for-weather');
	var curWeatherHTML = '<div class="drop-weather-button">' +
      						'<div class="outer-today-ico">' +
          						'<span class="icons-for-c-min icon-weather-min-' + val.condition.code +'"></span>' +
          						'<i class="today-weather">' + val.condition.temp + 'С°</i>' + 
      						'</div>' +
      						'<div class="drop-wether">' +
          						'<p class="for-genwether"><span class="title-weather">Погода</span><span class="city-weather">Украина, Чернигов</span></p>' +
          						'<div class="section-today">' +
        							'<div class="for-weather-icon">' +
          								'<h5 class="section-heading">Сьогодні</h5>' +
          								'<span class="icons-for-c icon-weather-' + val.condition.code + '"></span>' +
        							'</div>' +
      								'<div class="weather-detail">' +
          								'<h4 class="weather-heading">' +
              								'<span class="temp-now">' + val.condition.temp + 'С°</span>' +
              								'<span class="phrase">Температура зараз</span>' +
          								'</h4>' +
          								// '<span class="temperature high-temperature">' + curTempMax + 'С°</span>' +
          								// '<span class="temperature low-temperature">' + curTempMin +'С°</span>' +
          								'<p class="summary">' + self.description[val.condition.code] + '</p>' +
      								'</div>' +
          						'</div>' +
          						'<div class="section-this-week">' +
              						'<h5 class="section-heading">Тиждень</h5>' +
              						'<ul class="item-list-temperature">' +
                  						self.getForecast(val.forecast) +
              						'</ul>' +
          						'</div>' +
      						'</div>' +
  						'</div>';
	weatherBlock.insertAdjacentHTML('afterBegin', curWeatherHTML);
};

Weather.prototype.description = {
	0: 'Торнадо',
	1: 'Тропічний шторм',
	2: 'Ураган',
	3: 'Сильні грози',
	4: 'Грози',
	5: 'Змішаний дощ зi снігом',
	6: 'Змішаний дощ зi снігом',
	7: 'Змішаний дощ зi снігом',
	8: 'Паморозь',
	9: 'Мряка',
	10: 'Град',
	11: 'Зливи',
	12: 'Зливи',
	13: 'Сніговi пориви',
	14: 'Легкий сніг',
	15: 'Хуртовина',
	16: 'Снiг',
	17: 'Град',
	18: 'Дощ зі снігом',
	19: 'Туманно',
	20: 'Туманно',
	21: 'Туманно',
	22: 'Туманно',
	23: 'Вітрянно',
	24: 'Вітрянно',
	25: 'Прохолодно',
	26: 'Хмарно',
	27: 'Переважно хмарно',
	28: 'Переважно хмарно',
	29: 'Мінлива хмарність',
	30: 'Мінлива хмарність',
	31: 'Ясно',
	32: 'Сонячно',
	33: 'Ясно',
	34: 'Ясно',
	35: 'Змішаний дощ з градом',
	36: 'Спекотно',
	37: 'Грози',
	38: 'Розсіяні грози',
	39: 'Розсіяні грози',
	40: 'Мінлива хмарність',
	41: 'Сильний снігопад',
	42: 'Снігопад',
	43: 'Сильний снігопад',
	44: 'Мінлива хмарність',
	45: 'Зливи',
	46: 'Зливовий сніг',
	47: 'Зливи'
};

Weather.prototype.getForecast = function(val, self){

	var getDayUkr = function(day){
		var days = {
	        Mon: 'Понедiлок',
	        Tue: 'Вiвторок',
	        Wed: 'Середа',
	        Thu: 'Четвер',
	        Fri: 'П`ятниця',
	        Sat: 'Субота',
	        Sun: 'Недiля'
	    };
	    return days[day];
	};
	var li = '';
	for(var i = 1; i < 5; i++){	    		
		li += '<li class="item-time-temperature">' +
					'<span class="icons-for-c icon-weather-' + val[i].code + '"></span>' +
					'<span class="day">' + getDayUkr(val[i].day) + ', ' + val[i].date + ', ' + '</span>' + 
					'<span class="temperature-days high-temperature">' + val[i].high + 'С°</span>' +
					'<span class="temperature-days low-temperature">' + val[i].low + 'С°</span>' +
				'</li>';	    		
	};
	return li;
};
function Currency(){
	var self = this;
	var xhr = new XMLHttpRequest();
    xhr.open('GET', 'http://' + location.hostname + '/site/tryCurrency', true);

    xhr.onreadystatechange = function() {
        if (xhr.readyState === 4 && xhr.status === 200) {
            var xhrObject = JSON.parse(xhr.responseText);
			self.getBanksObj(xhrObject);
	      }
    };

    xhr.send();    
};

Currency.prototype = Object.create(App.prototype);
Currency.prototype.constructor = Currency;

Currency.prototype.getBanksObj = function(xhrObject){
	var bankObj = [],
		current = "",
		arrBanks = ['ПриватБанк', 'ПУМБ', 'Укрсоцбанк'];
	for (var i = 0; i < xhrObject.length; i++) {
		if(current != xhrObject[i].bankName){
			if(obj && Object.keys(obj).length > 0){
				bankObj.push(obj);
			};
			var obj = {};
			if(arrBanks.indexOf(xhrObject[i].bankName) == -1){
				continue;
			};
			obj.bankName = xhrObject[i].bankName;
			obj[xhrObject[i].codeAlpha] = {
				rateBuy: xhrObject[i].rateBuy,
				rateBuyDelta: xhrObject[i].rateBuyDelta,
				rateSale: xhrObject[i].rateSale,
				rateSaleDelta: xhrObject[i].rateSaleDelta
			}
		} else {
			obj[xhrObject[i].codeAlpha] = {
				rateBuy: xhrObject[i].rateBuy,
				rateBuyDelta: xhrObject[i].rateBuyDelta,
				rateSale: xhrObject[i].rateSale,
				rateSaleDelta: xhrObject[i].rateSaleDelta
			}
		};
		current = xhrObject[i].bankName;
	};
	this.getBanksHTML(bankObj);
};

Currency.prototype.generate = function(obj, rate, rateDelta){
	var template = '<span><mark>' + 
	                  (obj.EUR ? obj.EUR[rate] : '') + 
	                '</mark>' + 
	                	((obj.EUR[rateDelta] > 0) ? '<i class="-to-hight">&#9650;</i>' : '<i class="-to-low">&#9660;</i>') + 
	                '</span>' + 
	                '<span><mark>' + 
	                  (obj.USD ? obj.USD[rate] : '') +
	                '</mark>' +
	                	((obj.USD[rateDelta] > 0) ? '<i class="-to-hight">&#9650;</i>' : '<i class="-to-low">&#9660;</i>') +
	                '</span>' +
	                '<span><mark>' + 
	                  (obj.RUB ? obj.RUB[rate] : '') +
	                '</mark>' +
					  ((obj.RUB[rateDelta] > 0) ? '<i class="-to-hight">&#9650;</i>' : '<i class="-to-low">&#9660;</i>') +
	                '</span>';
	return template;
};

Currency.prototype.getBanksHTML = function(bankObj){
  var curWrap = document.querySelector('.-with-before.-currency-val');
  var bank = '';

  for(var i = 0; i < bankObj.length; i++){
	  bank += '<tr>' +
	            '<td>' +
	                '<p><i>' + bankObj[i].bankName + '</i></p>' +
	            '</td>' +
	            '<td>' +
	                '<span>' +
	                  (bankObj[i].EUR ? '<b>&euro;</b>' : '') +
	                '</span>' +
	                '<span>' +
	                  (bankObj[i].USD ? '<b>$</b>' : '') +
	                '</span>' +
	                '<span>' +
	                  (bankObj[i].RUB ? '<b>R</b>' : '') +
	                '</span>' +
	            '</td>' +
	            '<td>' +
	            	this.generate(bankObj[i], 'rateBuy', 'rateBuyDelta') +
	            '</td>' +
	            '<td>' +
	            	this.generate(bankObj[i], 'rateSale', 'rateSaleDelta') +
	            '</td>' +
	        '</tr>';
  };

  var currencyHTML = '<table class="-new-currensy">' +
                          '<tr>' +
                            '<th>' +
                              '<span>Банк</span>' +
                            '</th>' +
                            '<th>' +
                              '<span style="font-size: 18px">&#402;</span>' +
                            '</th>' +
                            '<th>' +
                              '<span>Покупка</span>' +
                            '</th>' +
                            '<th>' +
                              '<span>Продажа</span>' +
                            '</th>' +
                          '</tr>' +
                            bank +
                        '</table>';  
	curWrap.insertAdjacentHTML('beforeEnd', currencyHTML);
};
function Iframe(elem){
    if(!elem) return;

    var src = elem.getAttribute('data-src'),                
        arrSrc = src.split(','),
        str = '';

    for(var i = 0; i < arrSrc.length; i++){
        str += this.template(arrSrc[i]);
    };

    elem.insertAdjacentHTML('beforeEnd', str);
};

Iframe.prototype = Object.create(App.prototype);
Iframe.prototype.constructor = Iframe;

Iframe.prototype.template = function(srcLink){
    var temp = '<div class="val-outer-frame">' + 
                    '<span class="val-ico-online">' + 
                        '<i>Online iframe</i>' + 
                    '</span>' + 
                    '<iframe src="' + srcLink + '"></iframe>' + 
                '</div>';
    return temp;
};
function Modal(){
    var self = this;
    this.loginBtn = document.querySelector('.-login');
    this.regBtn = document.querySelector('.-registration');
    this.redactBtn = document.querySelector('.-about');
    this.remembBtns = document.querySelectorAll('.-val-remember-pass');
    this.closeBtns = document.querySelectorAll('.val-close-modals');
    this.wrapModal = document.querySelector('.val-modal-login-reg-outer');    

    this.getElemByAttr('data-attr');
    this.loginBtn.addEventListener('click', this.openModal.bind(this));
    this.regBtn.addEventListener('click', this.openModal.bind(this));
    this.redactBtn.addEventListener('click', this.openModal.bind(this));
    for(var i = 0; i < this.remembBtns.length; i++){
        this.remembBtns[i].addEventListener('click', this.openModal.bind(this));
    };
    for(var i = 0; i < this.closeBtns.length; i++){
        this.closeBtns[i].addEventListener('click', this.closeModal.bind(this));
    };
};

Modal.prototype = Object.create(App.prototype);
Modal.prototype.constructor = Modal;

Modal.prototype.openModal = function(event){
	var self = this;
    var buttons = self.getElemByAttr('data-attr'),
        target = event && event.target || event.srcElement,
        targetAttr = target.getAttribute('data-attr'),
        targetModal = document.querySelector('.' + targetAttr),
        loginForm = document.getElementById('login'),
        remembForm = document.getElementById('remember');
    if(targetAttr){
        self.wrapModal.style.cssText += 'display: table;';
        targetModal.style.cssText += 'display: block;';
        setTimeout(function(){
            self.wrapModal.style.cssText += 'opacity: 1;';
            targetModal.style.cssText += 'opacity: 1;';
        }, 1);
    };
    for(var i = 0; i < self.remembBtns.length; i++){
        if(target == self.remembBtns[i]){
            if(getComputedStyle(remembForm).display == 'none'){
                loginForm.style.cssText += 'display: none; opacity: 0;';
                remembForm.style.cssText += 'display: block; opacity: 1;';
            } else {
                remembForm.style.cssText += 'display: none; opacity: 0;';
                loginForm.style.cssText += 'display: block; opacity: 1;';
            }            
        };
    };
};

Modal.prototype.closeModal = function(event){
	var self = this;
    var target = event && event.target || event.srcElement;
    if(target.classList.contains('val-close-modals')){
       	target.parentElement.style.cssText += 'opacity: 0;';
    	self.wrapModal.style.cssText += 'opacity: 0;';
    	setTimeout(function(){
            target.parentElement.style.cssText += 'display: none;';
            self.wrapModal.style.cssText += 'display: none;';
        }, 500);
    };        
};
function Category(elem){
    if(!elem) return;

    var self = this;
    this.id = 1;
    this.status = true;
    this.handlerScroll();
};

Category.prototype = Object.create(App.prototype);
Category.prototype.constructor = Category;

Category.prototype.ajax = function(){    
    var self = this;
    var scrolled = window.pageYOffset,
        total = document.documentElement.offsetHeight,
        delta = total - scrolled;    
    if(self.status == true && delta < 1500 && self.id < 10){        
        var xhr = new XMLHttpRequest();
        self.status = false;
        xhr.open('GET', '/site/GetCategory?id=' + self.id, true);
        xhr.onreadystatechange = function() {
            if (xhr.readyState === 4 && xhr.status === 200) {
                var xhrObject = JSON.parse(xhr.responseText),
                    category = JSON.parse(xhrObject.category),
                    news = JSON.parse(xhrObject.news);
                self.loadNews(category, news, xhrObject.language);            
            };
        };
        xhr.send();
    };
};

Category.prototype.handlerScroll = function(){
    window.addEventListener('scroll', this.ajax.bind(this));    
};

Category.prototype.loadNews = function(cat, news, lang){
    var self = this;
    var newsWithImg = '',
        newsWithoutImg = '';
    newsWithImg += '<a href="/site/news/' + news[0].id + '" class="val-news-item-category val-category-image">' +
                        '<div class="val-item-outer-category-image">' +
                            '<img src="/uploads/news/thumb/' + news[0].image + '" alt="' + news[0]['title_' + lang] + '">' +
                        '</div>' +
                        '<div class="val-line-vews-data">' +
                            '<span class="val-content-news-data">' + this.compareDate(news[0].date, lang) + '</span>' +
                            '<span class="val-news-view">' + news[0].views + '</span>' +
                        '</div>' +
                        '<h2 class="val-title-news-category">' + news[0]['title_' + lang] + '</h2>' +
                    '</a>';
    for(var i = 1; i < news.length; i++){
        newsWithoutImg += '<a href="/site/news/' + news[i].id +'" class="val-news-item-category val-category-image">' +
                                '<div class="val-line-vews-data">' +
                                    '<span class="val-content-news-data">' + this.compareDate(news[i].date, lang) + '</span>' +
                                    '<span class="val-news-view">' + news[i].views + '</span>' +
                                '</div>' +
                                '<h2 class="val-title-news-category">' + news[i]['title_' + lang] + '</h2>' +
                                '<p class="val-description-news-category">' + news[i]['description_' + lang].slice(0, 247) + '...' + '</p>' +
                            '</a>';        
    };
    var newsBlock = document.querySelector('.val-full-width-category'),        
        catHtml = '<div class="val-category-block">' +
                    '<h2 class="val-title-uppercase-with-line">' + cat[0]['name_' + lang] + '</h2>' +
                    '<div class="val-news-list-category">' +        
                        newsWithImg +
                        newsWithoutImg +
                    '</div>' +
                '</div>';
    newsBlock.insertAdjacentHTML('beforeEnd', catHtml);
    self.status = true;
    self.id++;
};
function CategorySingle(elem){
	if(!elem) return;

    var self = this;
    this.sourceId = document.getElementById('val-count-and-id');
    this.offset = this.sourceId.getAttribute('data-count');
    this.id = this.sourceId.getAttribute('data-id');
    
    this.status = true;
    this.handlerScrollSingle();
    this.ajax();    
};

CategorySingle.prototype = Object.create(App.prototype);
CategorySingle.prototype.constructor = CategorySingle;

CategorySingle.prototype.ajax = function(){    
    var self = this;
    if(self.status == true){
        var xhr = new XMLHttpRequest();
        self.status = false;
        xhr.open('GET', '/site/GetCategoryByIdXhrOrNotId?id=' + self.id + '&offset=' + self.offset, true);
        xhr.onreadystatechange = function() {
            if (xhr.readyState === 4 && xhr.status === 200) {
                var xhrObject = JSON.parse(xhr.responseText),
                    news = JSON.parse(xhrObject.news);
                self.loadNewsSingle(xhrObject, news, self.offset, xhrObject.language);
            };
        };
        xhr.send();
    };
};

CategorySingle.prototype.handlerScrollSingle = function(){
    window.addEventListener('scroll', this.ajax.bind(this));
};

CategorySingle.prototype.loadNewsSingle = function(xhrObject, news, offset, lang){
    var self = this;
    var newsSingle = '';
	for(var i = 0; i < news.length; i++){
        newsSingle += '<a href="/site/news/' + news[i].id + '" class="val-block-gen-news">' +
                            '<div class="val-image-block-gen-news">' +
                                '<img src="/uploads/news/thumb/' + news[i].image + '">' +
                            '</div>' +
                            '<div class="val-description-block-gen-news">' +
                                '<span class="val-news-view">' + news[i].views + '</span>' +
                                '<span class="val-content-news-data">' + this.compareDate(news[i].date, lang) + '</span>' +
                                '<h3 class="val-content-news-title-small">' + news[i]['title_' + lang] + '</h3>' +
                            '</div>' +
                        '</a>';
    };
    var newsSingleBlock = document.getElementById('val-single-category');
    newsSingleBlock.insertAdjacentHTML('beforeEnd', newsSingle);

    self.offset = xhrObject.offset;
    self.status = true;
};
function FixedAccord(elem){
    if(!elem) return;

    var self = this;

    this.handlerScrollFixed();
};

FixedAccord.prototype = Object.create(App.prototype);
FixedAccord.prototype.constructor = FixedAccord;

FixedAccord.prototype.scrollAccord = function(){
    var accord = document.getElementById('val-only-else-pages'),
        accordWidth = accord.clientWidth,
        accordUl = document.querySelector('#val-only-else-pages .val-list-accard'),
        curScroll = window.pageYOffset,
        accordTop = accord.getBoundingClientRect().top + curScroll,
        blog = document.querySelector('.val-blogers-column'),
        blogBottom = blog.getBoundingClientRect().bottom + blog.clientHeight;
    if(curScroll > accordTop){
        accordUl.style.cssText += 'position: fixed;top: 0;width: ' + accordWidth + 'px;';
   } else {
        accordUl.style.cssText += 'position: static;top: auto;width: auto;'; 
   };
};

FixedAccord.prototype.handlerScrollFixed = function(){
    window.addEventListener('scroll', this.scrollAccord.bind(this));
};